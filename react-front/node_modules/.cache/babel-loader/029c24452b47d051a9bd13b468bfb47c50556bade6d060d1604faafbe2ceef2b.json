{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Afthercaft\\\\Pictures\\\\ApiReact\\\\react-front\\\\src\\\\context\\\\adminContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { verifyTokenRequest } from '../AuthP/auth'; // Ajusta la ruta según tu estructura de carpetas\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminContext = /*#__PURE__*/createContext();\nexport const useAdmin = () => {\n  _s();\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin debe ser usado dentro de un AdminProvider');\n  }\n  return context;\n};\n_s(useAdmin, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AdminProvider = ({\n  children\n}) => {\n  _s2();\n  const [esAdmin, setEsAdmin] = useState(false);\n  const [cargando, setCargando] = useState(true);\n  useEffect(() => {\n    const verificarAdmin = async () => {\n      const token = localStorage.getItem('token'); // Cambia esto si prefieres usar Cookies\n      if (token) {\n        try {\n          const respuesta = await verifyTokenRequest(token);\n          console.log('Respuesta de verificación:', respuesta.data);\n          setEsAdmin(respuesta.data.role === 'admin');\n        } catch (error) {\n          console.error('Error al verificar el estado de administrador:', error);\n          setEsAdmin(false);\n        }\n      } else {\n        setEsAdmin(false);\n      }\n      setCargando(false);\n    };\n    verificarAdmin();\n  }, []);\n  const value = {\n    esAdmin,\n    cargando,\n    setEsAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n    value: value,\n    children: cargando ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s2(AdminProvider, \"tY4nmAskaHJmR7+yDMWwC6DdESw=\");\n_c = AdminProvider;\nvar _c;\n$RefreshReg$(_c, \"AdminProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","verifyTokenRequest","Cookies","jsxDEV","_jsxDEV","AdminContext","useAdmin","_s","context","Error","AdminProvider","children","_s2","esAdmin","setEsAdmin","cargando","setCargando","verificarAdmin","token","localStorage","getItem","respuesta","console","log","data","role","error","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Afthercaft/Pictures/ApiReact/react-front/src/context/adminContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { verifyTokenRequest } from '../AuthP/auth'; // Ajusta la ruta según tu estructura de carpetas\r\nimport Cookies from 'js-cookie';\r\n\r\nconst AdminContext = createContext();\r\n\r\nexport const useAdmin = () => {\r\n  const context = useContext(AdminContext);\r\n  if (!context) {\r\n    throw new Error('useAdmin debe ser usado dentro de un AdminProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AdminProvider = ({ children }) => {\r\n  const [esAdmin, setEsAdmin] = useState(false);\r\n  const [cargando, setCargando] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const verificarAdmin = async () => {\r\n      const token = localStorage.getItem('token'); // Cambia esto si prefieres usar Cookies\r\n      if (token) {\r\n        try {\r\n          const respuesta = await verifyTokenRequest(token);\r\n          console.log('Respuesta de verificación:', respuesta.data);\r\n          setEsAdmin(respuesta.data.role === 'admin');\r\n        } catch (error) {\r\n          console.error('Error al verificar el estado de administrador:', error);\r\n          setEsAdmin(false);\r\n        }\r\n      } else {\r\n        setEsAdmin(false);\r\n      }\r\n      setCargando(false);\r\n    };\r\n  \r\n    verificarAdmin();\r\n  }, []);\r\n\r\n  const value = { esAdmin, cargando, setEsAdmin };\r\n\r\n  return (\r\n    <AdminContext.Provider value={value}>\r\n      {cargando ? <div>Loading...</div> : children}\r\n    </AdminContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,kBAAkB,QAAQ,eAAe,CAAC,CAAC;AACpD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,YAAY,gBAAGR,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMS,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGV,UAAU,CAACO,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAIF,KAAK,EAAE;QACT,IAAI;UACF,MAAMG,SAAS,GAAG,MAAMpB,kBAAkB,CAACiB,KAAK,CAAC;UACjDI,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,SAAS,CAACG,IAAI,CAAC;UACzDV,UAAU,CAACO,SAAS,CAACG,IAAI,CAACC,IAAI,KAAK,OAAO,CAAC;QAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdJ,OAAO,CAACI,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;UACtEZ,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC,MAAM;QACLA,UAAU,CAAC,KAAK,CAAC;MACnB;MACAE,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAAK,GAAG;IAAEd,OAAO;IAAEE,QAAQ;IAAED;EAAW,CAAC;EAE/C,oBACEV,OAAA,CAACC,YAAY,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EACjCI,QAAQ,gBAAGX,OAAA;MAAAO,QAAA,EAAK;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GAAGrB;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAE5B,CAAC;AAACpB,GAAA,CAhCWF,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}